# START OF _scrabble_cython_opt.pyx


#python
#Scrabble O - Cython
#Stable 03JUN25


import importlib.util
import sys

# --- Dynamically import your main Scrabble script ---
main_script_name_for_import = "Scrabble Game" # Conceptual module name Python will assign
main_script_filename = "Scrabble Game.py"  # ACTUAL FILENAME on disk

# Attempt to create a module spec from the file location
spec = importlib.util.spec_from_file_location(main_script_name_for_import, main_script_filename)

if spec is None:
    print(f"CRITICAL ERROR in _scrabble_cython_opt.pyx: Could not create module spec for '{main_script_filename}'.", file=sys.stderr)
    print(f"Ensure '{main_script_filename}' is in the same directory as this .pyx file and setup.py.", file=sys.stderr)
    print(f"Current sys.path during compilation: {sys.path}", file=sys.stderr)
    raise ImportError(f"Failed to create module spec for {main_script_filename}")

# Create a new module object based on the spec
scrabble_game_module = importlib.util.module_from_spec(spec)

if scrabble_game_module is None:
    print(f"CRITICAL ERROR in _scrabble_cython_opt.pyx: Could not create module from spec for '{main_script_filename}'.", file=sys.stderr)
    raise ImportError(f"Failed to create module from spec for {main_script_filename}")

sys.modules[main_script_name_for_import] = scrabble_game_module

try:
    print(f"INFO (_scrabble_cython_opt.pyx): Attempting to execute module '{main_script_filename}' via importlib...")
    spec.loader.exec_module(scrabble_game_module)
    print(f"INFO (_scrabble_cython_opt.pyx): Successfully executed module '{main_script_filename}' via importlib.")
except FileNotFoundError:
    print(f"CRITICAL ERROR in _scrabble_cython_opt.pyx: The file '{main_script_filename}' was not found by importlib loader.", file=sys.stderr)
    print(f"Please check the path and filename. Current working directory during compilation might be relevant.", file=sys.stderr)
    raise
except Exception as e:
    print(f"CRITICAL ERROR in _scrabble_cython_opt.pyx: Failed to execute module '{main_script_filename}' during importlib phase.", file=sys.stderr)
    import traceback
    traceback.print_exc(file=sys.stderr)
    raise

# After successful execution of scrabble_game_module, its top-level
# variables, functions, and classes are available as attributes.
# Assign them to variables in the .pyx file's scope for _gaddag_traverse to use.

# Constants
GRID_SIZE = scrabble_game_module.GRID_SIZE
VC_VALID = scrabble_game_module.VC_VALID

# Functions
is_valid_play = scrabble_game_module.is_valid_play
calculate_score = scrabble_game_module.calculate_score
# Counter is not created in Cython, it's passed as an object.

# Classes / Instances
Gaddag = scrabble_game_module.Gaddag # For Gaddag.SEPARATOR
# Note: DAWG is not directly used by _gaddag_traverse itself,
# but find_main_word_cy will need it if we move DAWG.search calls into it.
# For now, DAWG is used by cross_check_sets generation in Python.


# Full, complete function with no code omitted
# File: _scrabble_cython_opt.pyx

cpdef _gaddag_traverse(
    tuple anchor_pos, object rack_counts, list tiles, list board, set blanks,
    dict cross_check_sets, object gaddag_node, # gaddag_node is a GaddagNode instance
    list current_word_tiles, bint is_reversed, object current_axis, # current_axis is 'H' or 'V'
    list all_found_moves, set unique_move_signatures,
    list original_tiles_state, bint is_first_play, int full_rack_size,
    int max_len=GRID_SIZE, # GRID_SIZE is an int from the imported scrabble_game_module
    int depth=0, bint is_silent_batch_run_param=False
):
    # Declare types for frequently used local variables
    cdef int r_last, c_last, r_place_loop, c_place_loop, next_r, next_c, ref_r, ref_c, wr_loop, wc_loop
    cdef bint is_new_loop, is_blank_loop, is_bingo_from_validation, is_blank_in_word_loop, found_primary, is_along_axis
    cdef str letter_place_loop, letter, existing_tile_on_board, primary_word_str, word_with_blanks, w_letter_loop
    cdef list current_word_tiles_copy_list
    cdef list newly_placed_list_details_list
    cdef tuple new_tiles_sig_tuple
    cdef list temp_tiles_for_validation_list
    cdef set temp_blanks_for_validation_set
    cdef set move_blanks_coords_for_this_play_set
    cdef set newly_placed_coords_for_this_play_set
    cdef object validation_code, detail # These come from a Python function
    cdef list all_words_details_for_score_list
    cdef list leave_list
    cdef int score, longest_word_len
    cdef tuple start_pos
    cdef object orientation # Can be str or other if logic changes
    cdef object next_node_child # This will be a GaddagNode instance
    cdef tuple next_pos
    cdef str cross_axis
    cdef set allowed_letters_for_cross
    # cdef object new_rack_counts_letter, new_rack_counts_blank # No longer creating new Counters here
    cdef list primary_word_tiles # list of tuples
    cdef list word_with_blanks_list
    cdef dict move_details_dict # Python dict
    cdef list all_words_formed_details_for_primary_word # list of lists of tuples
    cdef object word_detail_item # for iterating through list of lists
    cdef tuple t # for iterating through list of tuples in word_detail_item
    cdef int r, c # for tuple unpacking in list comprehensions
    cdef str l # for tuple unpacking
    cdef bint is_new # for tuple unpacking
    # Added for lambda replacement loops (and other explicit loops)
    cdef tuple min_tile_h_loop, current_tile_h_loop, min_tile_v_loop, current_tile_v_loop
    cdef int i_h_loop, i_v_loop
    # Added for any() replacement loop
    cdef bint any_tile_in_newly_placed_loop
    # Added for list comprehension replacement loop
    cdef int r_loop_lc, c_loop_lc
    cdef str l_loop_lc
    cdef bint is_new_loop_lc
    # Added for replacing temp_tiles_for_validation_list comprehension
    cdef list row_item_tt
    # Added for replacing primary_word_str generator expression
    cdef list primary_word_str_parts_list
    cdef tuple tile_pws_loop
    # Added for replacing 'positions' list comprehension in move_details_dict
    cdef list positions_list_md_loop # For primary_word_tiles
    cdef list newly_placed_pos_list_md_loop # For newly_placed_list_details
    cdef tuple tile_md_pos_loop
    # Added for replacing set(generator_expr)
    cdef set temp_set_for_len_check
    cdef tuple item_for_set_loop # Generic tuple for iterating items like word_detail_item or primary_word_tiles
    # For unpacking in positions_list_md_loop for primary_word_tiles
    cdef int r_md_loop, c_md_loop 
    cdef str l_md_loop
    # For newly_placed_pos_list_md_loop
    cdef int r_np_md, c_np_md
    cdef str l_np_md


    if depth > 20: # Max recursion depth
        return

    # Pruning: if current word path is already too long
    if not current_word_tiles: # Should not happen if called correctly initially
        return
    if len(current_word_tiles) > max_len:
        return

    r_last, c_last, _, _, _ = current_word_tiles[-1]

    # If this node in GADDAG marks the end of a word AND we are moving forward (not reversed)
    if gaddag_node.is_terminal and not is_reversed:
        current_word_tiles_copy_list = list(current_word_tiles)
        
        newly_placed_list_details_list = []
        for r_loop_lc, c_loop_lc, l_loop_lc, _, is_new_loop_lc in current_word_tiles_copy_list:
            if is_new_loop_lc:
                newly_placed_list_details_list.append((r_loop_lc, c_loop_lc, l_loop_lc))
        
        if newly_placed_list_details_list: # Only proceed if new tiles were actually placed
            newly_placed_list_details_list.sort() # Sort in-place
            new_tiles_sig_tuple = tuple(newly_placed_list_details_list)
            if new_tiles_sig_tuple not in unique_move_signatures:
                temp_tiles_for_validation_list = []
                for row_item_tt in original_tiles_state:
                    temp_tiles_for_validation_list.append(row_item_tt[:])
                temp_blanks_for_validation_set = set(blanks)
                
                move_blanks_coords_for_this_play_set = set()
                newly_placed_coords_for_this_play_set = set()

                for r_place_loop, c_place_loop, letter_place_loop, is_blank_loop, is_new_loop in current_word_tiles_copy_list:
                    if is_new_loop:
                        if 0 <= r_place_loop < GRID_SIZE and 0 <= c_place_loop < GRID_SIZE:
                            temp_tiles_for_validation_list[r_place_loop][c_place_loop] = letter_place_loop
                            newly_placed_coords_for_this_play_set.add((r_place_loop, c_place_loop))
                            if is_blank_loop:
                                temp_blanks_for_validation_set.add((r_place_loop, c_place_loop))
                                move_blanks_coords_for_this_play_set.add((r_place_loop, c_place_loop))
                
                validation_code, is_bingo_from_validation, detail, all_words_details_for_score_list = is_valid_play(
                    newly_placed_list_details_list,
                    temp_tiles_for_validation_list,
                    is_first_play,
                    full_rack_size,
                    original_tiles_state,
                    None, # rack_before_play - not strictly needed by is_valid_play's current signature for this call context
                    is_silent_batch_run_param=True
                )

                if validation_code == VC_VALID:
                    unique_move_signatures.add(new_tiles_sig_tuple)
                    score = calculate_score(newly_placed_list_details_list, board, temp_tiles_for_validation_list, temp_blanks_for_validation_set, all_words_details_for_score_list)
                    all_words_formed_details_for_primary_word = all_words_details_for_score_list
                    primary_word_tiles = []
                    primary_word_str = ""
                    start_pos = (0, 0)
                    orientation = current_axis
                    
                    if all_words_formed_details_for_primary_word:
                        found_primary = False
                        for word_detail_item in all_words_formed_details_for_primary_word:
                            is_along_axis = False
                            if current_axis == 'H':
                                temp_set_for_len_check = set()
                                for item_for_set_loop in word_detail_item: # item_for_set_loop will be (r,c,l)
                                    temp_set_for_len_check.add(item_for_set_loop[0]) # Add r
                                if len(temp_set_for_len_check) == 1:
                                    is_along_axis = True
                            elif current_axis == 'V':
                                temp_set_for_len_check = set()
                                for item_for_set_loop in word_detail_item: # item_for_set_loop will be (r,c,l)
                                    temp_set_for_len_check.add(item_for_set_loop[1]) # Add c
                                if len(temp_set_for_len_check) == 1:
                                    is_along_axis = True
                            
                            if is_along_axis:
                                any_tile_in_newly_placed_loop = False
                                for t in word_detail_item: # t is already declared as cdef tuple
                                    if (t[0], t[1]) in newly_placed_coords_for_this_play_set:
                                        any_tile_in_newly_placed_loop = True
                                        break
                                if any_tile_in_newly_placed_loop:
                                    primary_word_tiles = word_detail_item
                                    found_primary = True
                                    break
                        if not found_primary:
                            longest_word_len = 0
                            for word_detail_item in all_words_formed_details_for_primary_word:
                                any_tile_in_newly_placed_loop = False # Reset for each word_detail_item
                                for t in word_detail_item:
                                    if (t[0], t[1]) in newly_placed_coords_for_this_play_set:
                                        any_tile_in_newly_placed_loop = True
                                        break
                                if any_tile_in_newly_placed_loop:
                                    if len(word_detail_item) > longest_word_len:
                                        longest_word_len = len(word_detail_item)
                                        primary_word_tiles = word_detail_item
                                        temp_set_for_len_check = set()
                                        for item_for_set_loop in primary_word_tiles:
                                            temp_set_for_len_check.add(item_for_set_loop[0]) # Add r
                                        if len(temp_set_for_len_check) == 1:
                                            orientation = 'H'
                                        else: # Must be vertical if not horizontal (assuming valid word_detail_item)
                                            temp_set_for_len_check = set()
                                            for item_for_set_loop in primary_word_tiles:
                                                temp_set_for_len_check.add(item_for_set_loop[1]) # Add c
                                            if len(temp_set_for_len_check) == 1:
                                                orientation = 'V'
                                            # else orientation remains what it was or default

                        if not primary_word_tiles and all_words_formed_details_for_primary_word:
                             primary_word_tiles = all_words_formed_details_for_primary_word[0]
                             temp_set_for_len_check = set()
                             for item_for_set_loop in primary_word_tiles:
                                 temp_set_for_len_check.add(item_for_set_loop[0]) # Add r
                             if len(temp_set_for_len_check) == 1:
                                 orientation = 'H'
                             else:
                                 temp_set_for_len_check = set()
                                 for item_for_set_loop in primary_word_tiles:
                                     temp_set_for_len_check.add(item_for_set_loop[1]) # Add c
                                 if len(temp_set_for_len_check) == 1:
                                     orientation = 'V'

                    if primary_word_tiles:
                        primary_word_str_parts_list = []
                        for tile_pws_loop in primary_word_tiles:
                            primary_word_str_parts_list.append(tile_pws_loop[2])
                        primary_word_str = "".join(primary_word_str_parts_list)
                        if orientation == 'H':
                            if primary_word_tiles: # Ensure list is not empty
                                min_tile_h_loop = primary_word_tiles[0] # Initialize with the first tile
                                for i_h_loop in range(1, len(primary_word_tiles)): # Start from the second tile
                                    current_tile_h_loop = primary_word_tiles[i_h_loop]
                                    if current_tile_h_loop[1] < min_tile_h_loop[1]: # Compare column index (tile_item[1])
                                        min_tile_h_loop = current_tile_h_loop
                                start_pos = min_tile_h_loop[:2]
                            else: # Should not happen if primary_word_tiles was populated
                                start_pos = (0,0) # Fallback
                        elif orientation == 'V':
                            if primary_word_tiles: # Ensure list is not empty
                                min_tile_v_loop = primary_word_tiles[0] # Initialize with the first tile
                                for i_v_loop in range(1, len(primary_word_tiles)): # Start from the second tile
                                    current_tile_v_loop = primary_word_tiles[i_v_loop]
                                    if current_tile_v_loop[0] < min_tile_v_loop[0]: # Compare row index (tile_item[0])
                                        min_tile_v_loop = current_tile_v_loop
                                start_pos = min_tile_v_loop[:2]
                            else: # Should not happen if primary_word_tiles was populated
                                start_pos = (0,0) # Fallback
                        else:
                            start_pos = primary_word_tiles[0][:2] if primary_word_tiles else (0,0)

                    word_with_blanks_list = []
                    if primary_word_tiles:
                        for wr_loop, wc_loop, w_letter_loop in primary_word_tiles:
                            is_blank_in_word_loop = (wr_loop, wc_loop) in newly_placed_coords_for_this_play_set and \
                                                    (wr_loop, wc_loop) in move_blanks_coords_for_this_play_set
                            word_with_blanks_list.append(w_letter_loop.lower() if is_blank_in_word_loop else w_letter_loop.upper())
                    word_with_blanks = "".join(word_with_blanks_list)
                    
                    leave_list = list(rack_counts.elements())
                    
                    positions_list_md_loop = []
                    if primary_word_tiles:
                        for r_md_loop, c_md_loop, l_md_loop in primary_word_tiles: # Unpack fully
                            positions_list_md_loop.append((r_md_loop, c_md_loop, l_md_loop))
                    else:
                        # Fallback if no primary_word_tiles, use newly_placed_list_details_list
                        # Ensure newly_placed_list_details_list contains (r,c,l) tuples
                        newly_placed_pos_list_md_loop = []
                        for r_np_md, c_np_md, l_np_md in newly_placed_list_details_list:
                             newly_placed_pos_list_md_loop.append((r_np_md, c_np_md, l_np_md))
                        positions_list_md_loop = newly_placed_pos_list_md_loop
                    
                    move_details_dict = {
                        'positions': positions_list_md_loop,
                        'blanks': move_blanks_coords_for_this_play_set,
                        'word': primary_word_str,
                        'score': score,
                        'start': start_pos,
                        'direction': orientation,
                        'leave': leave_list,
                        'is_bingo': is_bingo_from_validation,
                        'word_with_blanks': word_with_blanks,
                        'newly_placed': newly_placed_list_details_list
                    }
                    all_found_moves.append(move_details_dict)

    # Iterate through children of the current GADDAG node
    for letter_loop, next_node_child_loop in gaddag_node.children.items():
        letter = letter_loop
        next_node_child = next_node_child_loop

        if letter == Gaddag.SEPARATOR: # Gaddag is imported via importlib
            if is_reversed:
                _gaddag_traverse( # Direct recursion
                    anchor_pos, rack_counts, tiles, board, blanks, cross_check_sets,
                    next_node_child, current_word_tiles, False, current_axis, # is_reversed becomes False
                    all_found_moves, unique_move_signatures, original_tiles_state,
                    is_first_play, full_rack_size, max_len, depth + 1,
                    is_silent_batch_run_param
                )
            continue

        next_r, next_c = -1, -1
        if is_reversed:
            if current_axis == 'H': next_r, next_c = r_last, c_last - 1
            else:                   next_r, next_c = r_last - 1, c_last
        else:
            ref_r, ref_c = r_last, c_last
            if current_axis == 'H': next_r, next_c = ref_r, ref_c + 1
            else:                   next_r, next_c = ref_r + 1, ref_c
            
        if not (0 <= next_r < GRID_SIZE and 0 <= next_c < GRID_SIZE):
            continue

        next_pos = (next_r, next_c)
        existing_tile_on_board = tiles[next_r][next_c]

        if not existing_tile_on_board:
            cross_axis = 'V' if current_axis == 'H' else 'H'
            allowed_letters_for_cross = cross_check_sets.get(next_pos, {}).get(cross_axis, set())
            
            if rack_counts[letter] > 0 and letter in allowed_letters_for_cross:
                rack_counts[letter] -= 1 # Direct modification
                
                current_word_tiles.append((next_r, next_c, letter, False, True))
                _gaddag_traverse( # Direct recursion
                    anchor_pos, rack_counts, tiles, board, blanks, cross_check_sets, 
                    next_node_child, current_word_tiles,
                    is_reversed, current_axis, all_found_moves, unique_move_signatures,
                    original_tiles_state, is_first_play, full_rack_size, max_len, depth + 1,
                    is_silent_batch_run_param
                )
                current_word_tiles.pop() # Backtrack
                rack_counts[letter] += 1 # Backtrack: Restore tile count
            
            if rack_counts[' '] > 0 and (' ' in allowed_letters_for_cross or letter in allowed_letters_for_cross):
                rack_counts[' '] -= 1 # Direct modification
                
                current_word_tiles.append((next_r, next_c, letter, True, True))
                _gaddag_traverse( # Direct recursion
                    anchor_pos, rack_counts, tiles, board, blanks, cross_check_sets, 
                    next_node_child, current_word_tiles, 
                    is_reversed, current_axis, all_found_moves, unique_move_signatures,
                    original_tiles_state, is_first_play, full_rack_size, max_len, depth + 1,
                    is_silent_batch_run_param
                )
                current_word_tiles.pop() # Backtrack
                rack_counts[' '] += 1 # Backtrack: Restore blank count
        elif existing_tile_on_board == letter:
            current_word_tiles.append((next_r, next_c, letter, False, False))
            _gaddag_traverse( # Direct recursion
                anchor_pos, rack_counts, tiles, board, blanks, cross_check_sets, # Pass original rack_counts (no copy needed as no consumption)
                next_node_child, current_word_tiles,
                is_reversed, current_axis, all_found_moves, unique_move_signatures,
                original_tiles_state, is_first_play, full_rack_size, max_len, depth + 1,
                is_silent_batch_run_param
            )
            current_word_tiles.pop() # Backtrack








# Full, complete function with no code omitted
# File: _scrabble_cython_opt.pyx

cpdef tuple find_main_word_cy(list new_tiles_list, list tiles_board_list):
    # Type declarations
    cdef set rows_set, cols_set
    cdef bint is_horizontal, is_vertical
    cdef str orientation_str
    cdef int row_val, col_val
    cdef int min_col_val, max_col_val, min_row_val, max_row_val
    cdef list main_word_list
    cdef tuple tile_item_tuple # for iterating new_tiles_list
    cdef int r_nt, c_nt # for unpacking tile_item_tuple
    # l_nt (letter) is not directly used for rows/cols sets or min/max logic here
    cdef int r_loop_var, c_loop_var # for range loops
    cdef str tile_char_on_board # for tiles_board_list[r][c]

    if not new_tiles_list:
        return [], None

    rows_set = set()
    cols_set = set()
    for tile_item_tuple in new_tiles_list:
        # Assuming tile_item_tuple is (r, c, letter)
        r_nt = tile_item_tuple[0]
        c_nt = tile_item_tuple[1]
        rows_set.add(r_nt)
        cols_set.add(c_nt)

    is_horizontal = (len(rows_set) == 1)
    # is_vertical = (len(cols_set) == 1) # Original Python used if/elif, so check vertical only if not horizontal

    if is_horizontal:
        orientation_str = "horizontal"
        # Get the single row value
        for item in rows_set: 
            row_val = item
            break
        
        min_col_val = GRID_SIZE 
        max_col_val = -1
        for tile_item_tuple in new_tiles_list:
            r_nt = tile_item_tuple[0]
            c_nt = tile_item_tuple[1]
            if r_nt == row_val:
                if c_nt < min_col_val:
                    min_col_val = c_nt
                if c_nt > max_col_val:
                    max_col_val = c_nt
        
        # Extend to existing tiles on board
        # Ensure tiles_board_list[row_val] is accessible and its elements are strings
        while min_col_val > 0 and tiles_board_list[row_val][min_col_val - 1]:
            min_col_val -= 1
        while max_col_val < GRID_SIZE - 1 and tiles_board_list[row_val][max_col_val + 1]:
            max_col_val += 1
            
        main_word_list = []
        for c_loop_var in range(min_col_val, max_col_val + 1):
            tile_char_on_board = tiles_board_list[row_val][c_loop_var]
            if tile_char_on_board: 
                main_word_list.append((row_val, c_loop_var, tile_char_on_board))
        
        return (main_word_list, orientation_str) if len(main_word_list) > 1 else ([], None)

    elif (len(cols_set) == 1): # Check is_vertical here, as per original Python's elif structure
        orientation_str = "vertical"
        # Get the single col value
        for item in cols_set:
            col_val = item
            break

        min_row_val = GRID_SIZE
        max_row_val = -1
        for tile_item_tuple in new_tiles_list:
            r_nt = tile_item_tuple[0]
            c_nt = tile_item_tuple[1]
            if c_nt == col_val:
                if r_nt < min_row_val:
                    min_row_val = r_nt
                if r_nt > max_row_val:
                    max_row_val = r_nt

        # Extend to existing tiles on board
        # Ensure tiles_board_list elements are accessible
        while min_row_val > 0 and tiles_board_list[min_row_val - 1][col_val]:
            min_row_val -= 1
        while max_row_val < GRID_SIZE - 1 and tiles_board_list[max_row_val + 1][col_val]:
            max_row_val += 1
            
        main_word_list = []
        for r_loop_var in range(min_row_val, max_row_val + 1):
            tile_char_on_board = tiles_board_list[r_loop_var][col_val]
            if tile_char_on_board:
                main_word_list.append((r_loop_var, col_val, tile_char_on_board))
        
        return (main_word_list, orientation_str) if len(main_word_list) > 1 else ([], None)
    else:
        return [], None
