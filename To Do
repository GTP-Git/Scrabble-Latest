To-Do List

-- For BatchStats, see if playing <=3 unique letters on the opening move is more/less better than playing >3 unique letters. The theory is that less unique letters allows for less 8-letter bingo opportunities for your opponent.

-- Allow what-if scenarios, where the main_branch_game_state is saved, but players can make different plays, choose different racks, explore endgames, etc., Have a reset button that backs the main_branch_game_state to continue play. 

-- Create a constants.py file, can be used by my Batch Analysis program and Scrabble Game.py.

-- In Replay Mode, the console buttons can still override the Options options, requiring a very precise click to get an option to fire.

-- In All Words, have a search/filter function so you can look up a word from the list, which is updated and sorted in realtime based on text string search (how important is this, really? Not sure I'd use it much).

-- Need a way to gracefully stop endgame analysis, retaining the current best sequence.

-- add code for more than a 2-ply look-ahead

-- sometimes game is non-responsive upon startup, or temporarily hands during gameplay, once per game. Is there a way to diagnose and fix this?

-- ability to set up the board tiles in any configuration

-- Best Move Guess practice game, like in Woogles. But how practical? Have a separate file for saved games that have a "great" move in them? How much utility here? In Batch Mode flag any non-bingo move that is, say, 30% or more higher-scoring than the next best move and then note that in the batch .txt file (which game, which move (including full board state so it can be recreated)).

-- create a separate program that iterates through the saved batch game files and uses machine learning to determine which quadrant will end up with the most tiles after the first few turns. How many are required before this can be accurately assessed? Note horiz/vert first plays are mirror images, so no need to do separate analyses.







-- Add more strategy heuristics

  Board dynamics
  Offense/Defense
  Open/Closed
  Leading/Trailing
  Hot Spots
  Setups?


-- Cursor focus should default to thh first text box in any dialog


-- Save Batch statistics to a Google Sheets. I asked Gemini about this and is easily implemented, but requires OAuth flow, etc. I already have account set up so just need to add sheet ID, etc.

-- In Suggest and All Words, if bingo, show probablilty.

-- Show difference between the predicted opponent average score and the actual opponent score. Collate those stats on the Batch stats file. And in the end-of-game stats.

-- Allow different AI strengths. From best to worst:

  1. My Strength Is Ten-Fold
  2. I was National Champ in 1989. I Hardly Ever Think About It Anymore
  3. I See You Play Scrabble. I Play A Little Scrabble Myself
  4. DEI

-- In at least somee game modes, allow the user to go back/forward during live games, like Quackle does. Use same Replay functionality and set-up that I have now. Great for endgame what-ifs.

-- Is there an automatic code testing library for Python?

-- In Only Fives mode, the Suggest button should only show 5-letter words. Or maybe not? What about 4's added to a single letter to make a five?

-- Allow user to set up a board. I wonder: could the program take as input a photo of a Scrabble board and set the board up automatically for me? Mabye Grok/Gemini can take a photo of a Scrabble board, convert the pieces on the board to a text format, and then in my program I can either manually set the board up or just paste the text and the program will fill the board in automatically. It would need blank handling (so manual input for this) and the ability to deduce which tiles are still in the bag/on your opponent's rack.

-- Add tool tips and contextual help. Set up in a separate file:
# tooltip_data.py
TOOLTIP_TEXTS = {
    "sim_ai_candidates": "Number of top raw-scoring moves the AI considers before simulation.",
    "sim_opp_sims": "How many random opponent racks are simulated for each AI candidate move.",
    "sim_post_sim": "How many moves are evaluated with leave value after the simulation phase.",
    # Add more tooltips here using unique keys
}

-- use cProfile (and snakeviz to visualize) where my program is slow and inefficient

-- Get Endgame Solver working more efficiently. Will likely need to compile this function down to C. "C" below for details.


+__________+

-- Refactor critical functions to C:

Cython
Cython is a superset of Python that allows adding C data types to Python code. It compiles to C code, which can then be compiled into a Python extension module. This is a popular choice for optimizing performance-critical sections of Python code. Maximum Speed: To get the absolute maximum speedup for something like the GADDAG traversal, you might eventually consider defining the GaddagNode itself as a C structure (cdef struct) or Cython extension type (cdef class), but this is a much more significant rewrite. Also consider cimport, saw in video, skips some pre-running checks and speeds up code even more.

*******
xcode-select --install (I installed this, not sure yet how to use it)
xcode-select: note: install requested for command line developer tools
*******

CFFI (C Foreign Function Interface)
CFFI provides a way to call C code from Python and vice versa. It focuses on interfacing with existing C libraries, rather than directly translating Python code. It requires writing C declarations that describe the functions and data structures in the C library.

ctypes
ctypes is a built-in Python library for interacting with C libraries. Similar to CFFI, it allows loading and calling functions from shared libraries. It's generally considered lower-level than CFFI, requiring more manual management of data types and memory.

Shed Skin
Shed Skin is an experimental compiler that translates a subset of Python code into C++. It requires that the Python code be statically typed (types must be inferable at compile time). It can generate standalone executables or extension modules.

Numba
Numba is a just-in-time compiler that translates Python functions into optimized machine code at runtime. While it doesn't produce C code directly, it can significantly speed up numerical computations, often achieving performance comparable to C. Numba is best suited for code that uses NumPy arrays and mathematical operations.

It's also worth noting that tools like PyPy (an alternative Python implementation with a JIT compiler) and Nuitka (a compiler that translates Python to C or C++ and then compiles it) can also improve performance, although they don't provide C code as an output.

+__________+





________________________________________________
__________________    DONE    __________________
________________________________________________

-- Make length in Power Tiles mode 2-5 checked by default.

-- Make Endgame Solver checkbox unchecked by default

-- Bingo, Bango, Bongo bingo finding practice

-- MCST (Monte Carlo Search Tree). Or, at least a 2-ply look-ahead simulation.

-- Change exchange logic. Don't have a minimum score to activate, and don't require the exchange to be x points better. If it's better, it's better.

-- On Batch statistics printout, within each individual game provide a working link that goes to the game in question. This means each game in a batch is saved automatically before going to the next. Edit: not a link, but the file name is saved in each game section.

-- Allow for paste functionality in the Load Game text box

-- Calculate how good a draw is, based on the tiles drawn compared to the tiles in the pool. This is the "luck" factor.

-- Hint does the same thing as Suggest, so just remove it.

-- Ability to specify a rack, like in Quackle, useful for study and repeatability

-- Score Preview text encroaches on the Hint button.

-- On the Mode Selection screen, the HVH mode button should not be the default selection. Since it is, clicking gives no feedback that it was clicked.

-- Does Simulate This Move use the full simulation code? Ex, does it consider an exchange?

-- Show Remaining Tiles as AAAA, BB, DD instead of A: 4, B: 2 D: 2

-- The board should load before anything else, when a game/mode/practice is selected, otherwise while the computer things we have to stare at the Mode Selection screen.

-- Get rid of the () after bingos in the dialogs. (This is not a bug, just signifies no rack leave)

-- Play Again after 8-Letter Bingo should just run the game again, not go back to the Main screen.

-- Remove debug print for rack tile movement

-- In batch game text file, break bingos played down into quartiles.

-- Refactor main(), as it's way to big and sprawling and likely very inefficient

-- Give option for Developer Tools on the Mode Selection screen, where options like Profile, etc. are shown

-- When a game is loaded, the move replay is accurate, but the racks are simply simulated guesses, and do not reflect the actual racks. Because the Options button doesn't work in Replay mode because it conflicts with the replay controls, the user can't specify a rack to match the acutal game, if known.

-- player score text is crowding tiles, move up a bit

-- If type a word on the board and then click somewhere else on the board before backspacing, the letter stays on the board and my rack is not replenished, so remains <7 for the remainder of the game.

-- Allow user to specify simulation parameters per AI player, like how many words to consider, how many simulations per word., etc. Locate this within a submenu under Options.

-- Get Save/Load working - works using Scrabble Game Special (SGS)

-- In 8-Letter Bingo mode, Play Again should play again without bringing up the Probability dialog. This interrupts the practice flow.

-- Does best exchange algo use unseen tiles to inform decision?

--make suggest dialog movable and make words clicked in box appear on screen

-- In Replay Mode, allow user to double-clcik a listed move and the board state will appear for that move.

-- Racks should be alphabetized automatically, both human and AI, in every mode. This was working but broke

-- How does the code evaluate exchanging? Does it check every possible combination of the letters on the rack, checking each against the leave table?

-- Disable debug print for moves during Batch. No one is watching the batch, so no need to slow things down with printing

-- Need a way for the user to stop batch games and AI simulation process. Maybe add button to this effect. Need listeners for it.

-- Make Load Game text box/functionality more robust

-- def execute_game_session() is a function w/in main(). Should it be refactored out? Main() ain't getting any smaller.

-- Scrabble SGS V14 - add blanks/game on batch .txt file

-- add way to stop a batch run and save progress up to that point

-- how is the exchange threshhold used? For raw scores or for final scores? Exchanging way too much

-- Scrabble SGS V14 - should def execute_game_function be w/in main(), or outside as a callable function? Main() is getting large again.

-- Scrabble SGS V14 - In the batch .txt file, we need to note the number of bingos in each quartile, not just the percentage, so we can later collate that data

-- Scrabble SGS V14 - Power Tiles game over dialog should have a Main button, and the Play Again button should re-run the Power Tiles mode.

-- Scrabble SGS V14 - how is first play calculated? Discussed, current code catches all cases

-- Scrabble SGS V14 - In BBB mode, give option to limit probability, by both 7s and 8s? 9+'s?

-- Scrabble HMDE Refactor V2 - -- All Words dialog also needs to be movable and clicked words should appear on the board

-- Scrabble A 31MAY25 Add Phony - When Invalid word detected, provide option to allow anyway?

-- Scrabble B 31MAY25 Save In Progress - Add a feature to save a game in progress for later loading

-- make Load text box more robust. Maybe open in a text dialog in case user wants to back out?

-- Scrabble D 31MAY25 Word Lookup - Add a Define Word feature where user can type in word and the Xyzzyva definition appears.

-- In Simulation return results, both in the console and in the dialog, show board coordinates.

-- MAJOR CHANGE: reduce move list window by 1/2 vertically. Below it put arrow controls like we have for replay mode. Under that window, when in Replay Mode, show 5-15 best moves, like on Woogles, showing score, equity, leave eval, simulate button, the whole shebang.

-- Add Simulate (Sim) button in Insights window

-- Lookup button should be available in Replay Mode
